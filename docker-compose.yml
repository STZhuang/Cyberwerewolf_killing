services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: cyber_werewolves_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cyber_werewolves}
      POSTGRES_USER: ${POSTGRES_USER:-werewolves}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/deploy/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./infra/deploy/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - werewolves_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-werewolves} -d ${POSTGRES_DB:-cyber_werewolves}"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cyber_werewolves_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./infra/deploy/redis.conf:/etc/redis/redis.conf
    networks:
      - werewolves_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'

  # NATS Message Queue
  nats:
    image: nats:2.10
    container_name: cyber_werewolves_nats
    command: |
      -js 
      -m 8222 
      --cluster_name werewolves_cluster
      --http_port 8222
      --store_dir /data/jetstream
    ports:
      - "${NATS_PORT:-4222}:4222"
      - "${NATS_MONITORING_PORT:-8222}:8222"
    volumes:
      - nats_data:/data/jetstream
      - ./infra/deploy/nats.conf:/etc/nats/nats.conf
    networks:
      - werewolves_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/jsz?acc=all&streams=true"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'

  # WebSocket Gateway
  websocket-gateway:
    build:
      context: ./apps/websocket-gateway
      dockerfile: Dockerfile
    container_name: cyber_werewolves_ws_gateway
    environment:
      - REDIS_URL=redis://redis:${REDIS_PORT:-6379}
      - NATS_URL=nats://nats:${NATS_PORT:-4222}
      - WS_PORT=${WS_GATEWAY_PORT:-8002}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-False}
    ports:
      - "${WS_GATEWAY_PORT:-8002}:8002"
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - werewolves_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # FastAPI Backend
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: cyber_werewolves_api
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-werewolves}:${POSTGRES_PASSWORD:-password}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-cyber_werewolves}
      - REDIS_URL=redis://redis:${REDIS_PORT:-6379}
      - NATS_URL=nats://nats:${NATS_PORT:-4222}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES:-1440}
      - DEBUG=${DEBUG:-False}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WS_MAX_ROOMS=${WS_MAX_ROOMS:-5000}
      - WS_MAX_CONN_PER_IP=${WS_MAX_CONN_PER_IP:-5}
      - AGENT_API_BASE_URL=http://agents:${AGENT_PORT:-8001}
      - WS_GATEWAY_URL=http://websocket-gateway:${WS_GATEWAY_PORT:-8002}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./apps/api:/app
      - ./packages:/packages
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - werewolves_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Agent Service
  agents:
    build:
      context: ./apps/agents
      dockerfile: Dockerfile
    container_name: cyber_werewolves_agents
    environment:
      - API_BASE_URL=http://api:${API_PORT:-8000}
      - NATS_URL=nats://nats:${NATS_PORT:-4222}
      - REDIS_URL=redis://redis:${REDIS_PORT:-6379}
      - DEBUG=${DEBUG:-False}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - AGENT_PORT=${AGENT_PORT:-8001}
      # LLM配置通过前端界面动态设置，不使用环境变量
    ports:
      - "${AGENT_PORT:-8001}:8001"
    volumes:
      - ./apps/agents:/app
      - ./packages:/packages
    depends_on:
      api:
        condition: service_healthy
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - werewolves_network
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Vue.js Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: development
    container_name: cyber_werewolves_web
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:${API_PORT:-8000}}
      - VITE_WS_URL=${VITE_WS_URL:-ws://localhost:${WS_GATEWAY_PORT:-8002}}
      - VITE_AGENT_URL=${VITE_AGENT_URL:-http://localhost:${AGENT_PORT:-8001}}
      - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "${WEB_PORT:-3000}:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    depends_on:
      - api
      - websocket-gateway
    networks:
      - werewolves_network
    command: npm run dev -- --host 0.0.0.0
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: cyber_werewolves_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - werewolves_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: cyber_werewolves_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - werewolves_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: cyber_werewolves_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/deploy/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - agents
      - web
      - websocket-gateway
    networks:
      - werewolves_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  werewolves_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16